name: CD / Regular RC release

on:
  schedule:
    - cron: "0 19 * * 1" # 毎週月曜日の04:00(JST)
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: ./client

jobs:
  trigger-cd-prod:
    name: Trigger CD prod
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      new-tag-generated: ${{ steps.bump-version.outputs.VERSION_BUMPED }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Setup Git
        uses: ./.github/actions/setup-git
      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter
        with:
          working-directory: ./client
      - name: Setup Ruby
        uses: ./.github/actions/setup-ruby
        with:
          working-directory: ./client/ios
      - name: Install Flutter dependencies
        run: bundle exec fastlane install_flutter_dependencies
        working-directory: ./client/ios
      - name: Set full version name from tag
        run: bundle exec fastlane set_full_version_name_from_latest_rc_tag
        working-directory: ./client/ios
      - name: Bump version
        id: bump-version
        run: |
          if bundle exec fastlane bump_rc_version; then
            echo "VERSION_BUMPED=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION_BUMPED=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ./client/ios
      - name: Add tag
        if: steps.bump-version.outputs.VERSION_BUMPED == 'true'
        run: bundle exec fastlane add_rc_tag
        working-directory: ./client/ios
      - name: Push back tag
        if: steps.bump-version.outputs.VERSION_BUMPED == 'true'
        run: |
          latest_tag_name="$(git describe --tags --abbrev=0)"
          git push origin "${latest_tag_name}"

  deploy-ios-prod-app:
    name: Deploy iOS app
    permissions:
      contents: read
    needs:
      - trigger-cd-prod
    if: needs.trigger-cd-prod.outputs.new-tag-generated == 'true'
    runs-on: macos-15
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter
        with:
          working-directory: ./client
      - name: Setup Xcode
        uses: ./.github/actions/setup-xcode
        with:
          working-directory: ./client
      - name: Setup Swift Package Manager
        uses: ./.github/actions/setup-spm
      - name: Setup CocoaPods
        uses: ./.github/actions/setup-cocoapods
        with:
          working-directory: ./client/ios
      - name: Setup Ruby
        uses: ./.github/actions/setup-ruby
        with:
          working-directory: ./client/ios
      - name: Generate uncommitted Flutter files
        uses: ./.github/actions/generate-uncommitted-flutter-files
        with:
          firebase-options-dart-base64-emulator: ${{ secrets.FIREBASE_OPTIONS_DART_BASE64_EMULATOR }}
          firebase-options-dart-base64-dev: ${{ secrets.FIREBASE_OPTIONS_DART_BASE64_DEV }}
          firebase-options-dart-base64-prod: ${{ secrets.FIREBASE_OPTIONS_DART_BASE64_PROD }}
          working-parent-directory: ./client
          working-child-directory: ios
      - name: Generate uncommitted iOS files for prod
        run: echo "${{ secrets.GOOGLE_SERVICE_PLIST_BASE64_PROD }}" | base64 -d > ios/Runner/Firebase/Prod/GoogleService-Info.plist
        working-directory: ./client
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@65cfbc37e1464d733524cb555b724878f278b8c3 # v5
        with:
          p12-file-base64: ${{ secrets.APPLE_DISTRIBUTION_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_DISTRIBUTION_P12_PASSWORD }}
      - name: Import Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.PROVISIONING_PROFILE_APP_STORE_BASE64_PROD }}" | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/prod_app-store.mobileprovision
      - name: Generate env file
        uses: ./.github/actions/generate-env-file
        with:
          env-base64: ${{ secrets.ENV_BASE64 }}
          working-directory: ./client/ios
      - name: Generate App Store Connect API key file
        run: echo "${{ secrets.APP_STORE_CONNECT_API_KEY_P8_BASE64 }}" | base64 -d > fastlane/app-store-connect-api-key.p8
        working-directory: ./client/ios
      - name: Set full version name from latest tag
        run: bundle exec fastlane set_full_version_name_from_latest_rc_tag
        working-directory: ./client/ios
      - name: Deploy iOS prod app to Test Flight
        run: bundle exec fastlane ios deploy_prod
        working-directory: ./client/ios

  deploy-android-prod-app:
    name: Deploy Android app
    permissions:
      contents: read
    needs:
      - trigger-cd-prod
    if: needs.trigger-cd-prod.outputs.new-tag-generated == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter
        with:
          working-directory: ./client
      - name: Setup Gradle
        uses: ./.github/actions/setup-gradle
      - name: Setup Ruby
        uses: ./.github/actions/setup-ruby
        with:
          working-directory: ./client/android
      - name: Generate uncommitted Flutter files
        uses: ./.github/actions/generate-uncommitted-flutter-files
        with:
          firebase-options-dart-base64-emulator: ${{ secrets.FIREBASE_OPTIONS_DART_BASE64_EMULATOR }}
          firebase-options-dart-base64-dev: ${{ secrets.FIREBASE_OPTIONS_DART_BASE64_DEV }}
          firebase-options-dart-base64-prod: ${{ secrets.FIREBASE_OPTIONS_DART_BASE64_PROD }}
          working-parent-directory: ./client
          working-child-directory: android
      - name: Generate uncommitted Android files for prod
        run: echo "${{ secrets.GOOGLE_SERVICE_JSON_BASE64_PROD }}" | base64 -d > android/app/src/prod/google-services.json
        working-directory: ./client
      - name: Generate key store
        uses: ./.github/actions/generate-key-store
        with:
          keystore-jks-base64: ${{ secrets.KEYSTORE_JKS_BASE64 }}
          store-password: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          key-password: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          key-alias: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          working-directory: ./client
      - name: Generate Google Play service account key file
        run: echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_KEY_JSON_BASE64 }}" | base64 -d > fastlane/google-play-service-account-key.json
        working-directory: ./client/android
      - name: Set full version name from latest tag
        run: bundle exec fastlane set_full_version_name_from_latest_rc_tag
        working-directory: ./client/android
      - name: Deploy Android prod app to Google Play
        run: bundle exec fastlane android deploy_prod
        working-directory: ./client/android
